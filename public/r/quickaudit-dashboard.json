{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "quickaudit-dashboard",
  "type": "registry:component",
  "title": "QuickAudit Dashboard",
  "description": "QuickAudit Dashboard is a component for displaying audit information of supabase logs.",
  "files": [
    {
      "path": "registry/quickaudit-dashboard/quickaudit-dashboard.tsx",
      "content": "\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { TableIcon, Bell, Settings, Check, AlertCircle, RefreshCw, Filter, Info, AlertTriangle } from \"lucide-react\"\nimport { createClient, SupabaseClient } from \"@supabase/supabase-js\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Input } from \"@/components/ui/input\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\"\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport { Alert, AlertTitle, AlertDescription } from \"@/components/ui/alert\"\n\n// Types based on the actual database tables\ntype QuickAuditConfig = {\n  id: string\n  table_name: string\n  audit_enabled: boolean\n  created_at: string\n}\n\ntype AuditLog = {\n  id: number\n  table_name: string\n  operation: string\n  row_data: Record<string, unknown>\n  old_data: Record<string, unknown>\n  user_email: string\n  timestamp: string\n  reverted?: boolean\n}\n\nexport default function QuickAuditDashboard() {\n  const [supabase, setSupabase] = useState<SupabaseClient | null>(null)\n  const [tables, setTables] = useState<QuickAuditConfig[]>([])\n  const [changes, setChanges] = useState<AuditLog[]>([])\n  const [loading, setLoading] = useState(true)\n  const [stats, setStats] = useState({\n    totalTables: 0,\n    enabledTables: 0,\n    totalEvents: 0,\n    recentEvents: 0,\n  })\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [selectedTable, setSelectedTable] = useState<string | null>(null)\n  const [selectedOperation, setSelectedOperation] = useState<string | null>(null)\n  const [error, setError] = useState<string | null>(null)\n\n  // Initialize Supabase client using environment variables\n  useEffect(() => {\n    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\n    const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY \n    \n    if (supabaseUrl && supabaseKey) {\n      const client = createClient(supabaseUrl, supabaseKey)\n      setSupabase(client)\n    } else {\n      console.error(\"Supabase environment variables not found. Please set SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY\")\n    }\n  }, [])\n\n  // Load data when Supabase client is available\n  useEffect(() => {\n    if (supabase) {\n      fetchData()\n    }\n  }, [supabase]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  const fetchData = async () => {\n    setLoading(true)\n    try {\n      if (!supabase) return\n      // Fetch configuration data\n      const { data: configData, error: configError } = await supabase\n        .from(\"quickaudit_config\")\n        .select(\"*\")\n        .order(\"table_name\")\n\n      if (configError) throw configError\n\n      // Fetch audit logs\n      const { data: logsData, error: logsError } = await supabase\n        .from(\"audit_log\")\n        .select(\"*\")\n        .order(\"timestamp\", { ascending: false })\n        .limit(100)\n\n      if (logsError) throw logsError\n\n      // Fetch database schema to get all tables\n      const { data: schemaData, error: schemaError } = await supabase.rpc(\"get_all_tables\").select(\"table_name\")\n\n      // Calculate stats\n      const enabledTables = configData ? configData.filter((t) => t.audit_enabled).length : 0\n\n      // Count recent events (last 24 hours)\n      const oneDayAgo = new Date()\n      oneDayAgo.setDate(oneDayAgo.getDate() - 1)\n      const recentEvents = logsData ? logsData.filter((log) => new Date(log.timestamp as string) > oneDayAgo).length : 0\n\n      setTables((configData as unknown as QuickAuditConfig[]) || [])\n      setChanges((logsData as unknown as AuditLog[]) || [])\n      setStats({\n        totalTables: schemaData?.length || configData?.length || 0,\n        enabledTables,\n        totalEvents: logsData?.length || 0,\n        recentEvents,\n      })\n\n      // If we have schema data but some tables aren't in config, we'll add them\n      if (schemaData && !schemaError) {\n        const existingTables = new Set(configData.map((c) => c.table_name))\n        const missingTables = schemaData.filter((t) => !existingTables.has(t.table_name))\n\n        if (missingTables.length > 0) {\n          // Add missing tables to configuration (disabled by default)\n          for (const table of missingTables) {\n            await supabase.from(\"quickaudit_config\").insert({\n              table_name: table.table_name,\n              audit_enabled: false,\n            })\n          }\n          // Refresh data after adding new tables\n          fetchData()\n          return\n        }\n      }\n    } catch (error) {\n      console.error(\"Error fetching data:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const toggleAudit = async (id: string, currentState: boolean, tableName: string) => {\n    try {\n      setError(null);\n      if (!supabase) return\n      \n      // Call the security-definer function to toggle audit safely\n      const { error: toggleError } = await supabase.rpc(\n        'toggle_table_audit', \n        { \n          table_name: tableName,\n          enable: !currentState\n        }\n      );\n      \n      if (toggleError) {\n        console.error(\"Error toggling audit:\", toggleError);\n        setError(`Failed to toggle audit: ${toggleError.message}`);\n        return;\n      }\n  \n      // Update local state\n      setTables(\n        tables.map((table) => {\n          if (table.id === id) {\n            return {\n              ...table,\n              audit_enabled: !currentState,\n            }\n          }\n          return table\n        }),\n      )\n  \n      // Update stats\n      setStats((prev) => ({\n        ...prev,\n        enabledTables: prev.enabledTables + (currentState ? -1 : 1),\n      }))\n    } catch (error) {\n      console.error(\"Error toggling audit state:\", error);\n      setError(\"Failed to toggle audit state\");\n    }\n  }\n  \n  const enableAllTables = async () => {\n    try {\n      setError(null);\n      if (!supabase) return;\n      \n      // Call the security-definer function to enable all audits\n      const { error } = await supabase.rpc('enable_all_audits');\n      \n      if (error) {\n        console.error(\"Error enabling all audits:\", error);\n        setError(`Failed to enable all audits: ${error.message}`);\n        return;\n      }\n  \n      // Refresh data\n      fetchData();\n    } catch (error) {\n      console.error(\"Error enabling all tables:\", error);\n      setError(\"Failed to enable all tables\");\n    }\n  }\n\n  const handleRevert = async (id: number, operation: string, oldData: Record<string, unknown>, tableName: string) => {\n    try {\n      if (!supabase) return\n      if (operation === \"INSERT\") {\n        // For INSERT, we need to delete the record\n        const { error } = await supabase.from(tableName).delete().eq(\"id\", oldData.id)\n\n        if (error) throw error\n      } else if (operation === \"UPDATE\") {\n        // For UPDATE, restore the previous state\n        const { error } = await supabase.from(tableName).update(oldData).eq(\"id\", oldData.id)\n\n        if (error) throw error\n      } else if (operation === \"DELETE\") {\n        // For DELETE, re-insert the deleted record\n        const { error } = await supabase.from(tableName).insert(oldData)\n\n        if (error) throw error\n      }\n\n      // Mark this audit log entry as reverted\n      await supabase.from(\"audit_log\").update({ reverted: true }).eq(\"id\", id)\n\n      // Refresh the data\n      fetchData()\n    } catch (error) {\n      console.error(\"Error reverting change:\", error)\n    }\n  }\n\n  // Filter audit logs based on search and filters\n  const filteredLogs = changes.filter((log) => {\n    const matchesSearch = searchTerm\n      ? log.table_name.includes(searchTerm) ||\n        log.user_email?.includes(searchTerm) ||\n        JSON.stringify(log.row_data).includes(searchTerm)\n      : true\n\n    const matchesTable = selectedTable ? log.table_name === selectedTable : true\n    const matchesOperation = selectedOperation ? log.operation === selectedOperation : true\n\n    return matchesSearch && matchesTable && matchesOperation\n  })\n\n  // Get unique table names and operations for filters\n  const uniqueTables = Array.from(new Set(changes.map((log) => log.table_name)))\n  const uniqueOperations = Array.from(new Set(changes.map((log) => log.operation)))\n\n  const formatTimestamp = (timestamp: string) => {\n    const date = new Date(timestamp)\n    return date.toLocaleString()\n  }\n\n  const formatData = (data: unknown): string => {\n    if (!data) return \"—\"\n    if (typeof data === \"object\" && data !== null) {\n      return JSON.stringify(data, null, 2)\n    }\n    return String(data)\n  }\n\n  const getDiffText = (oldData: Record<string, unknown>, newData: Record<string, unknown>): string | null => {\n    if (!oldData || !newData) return null\n\n    const changes: string[] = []\n    for (const key in newData) {\n      if (oldData[key] !== newData[key]) {\n        changes.push(`${key}: ${formatData(oldData[key])} → ${formatData(newData[key])}`)\n      }\n    }\n\n    // Also check for keys that were in old but not in new\n    for (const key in oldData) {\n      if (!(key in newData)) {\n        changes.push(`${key}: ${formatData(oldData[key])} → (removed)`)\n      }\n    }\n\n    return changes.length > 0 ? changes.join(\", \") : null\n  }\n\n  if (!supabase) {\n    return (\n      <div className=\"p-6 max-w-md mx-auto text-center\">\n        <Card>\n          <CardHeader>\n            <CardTitle>QuickAudit Setup</CardTitle>\n            <CardDescription>Environment variables not found</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              QuickAudit requires the following environment variables to be set:\n            </p>\n            <div className=\"text-xs bg-muted p-2 rounded-md\">\n              <pre>{`NEXT_PUBLIC_SUPABASE_URL or SUPABASE_URL NEXT_PUBLIC_SUPABASE_SERVICE_ROLE_KEY or SUPABASE_SERVICE_ROLE_KEY`}</pre>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"w-full max-w-[100vw] overflow-x-hidden\">\n      <Card className=\"border-none shadow-none md:shadow-sm md:border w-full max-w-[100vw]\">\n        <CardHeader className=\"pb-2\">\n          <div className=\"flex flex-col md:flex-row md:justify-between md:items-center gap-4\">\n            <div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"flex h-8 w-8 items-center justify-center rounded-md bg-primary text-primary-foreground\">\n                  <TableIcon className=\"h-4 w-4\" />\n                </div>\n                <CardTitle>QuickAudit</CardTitle>\n              </div>\n              <CardDescription className=\"mt-1\">Audit trails for your Supabase data</CardDescription>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Button variant=\"outline\" size=\"sm\" onClick={fetchData}>\n                <RefreshCw className=\"h-4 w-4 mr-2\" />\n                Refresh\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"p-0 md:p-6 space-y-6 w-full max-w-[100vw]\">\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertTitle>Error</AlertTitle>\n              <AlertDescription>\n                {error}\n                {error.includes(\"Permission denied\") && (\n                  <div className=\"mt-2 text-sm\">\n                    <strong>Solution:</strong> Use a service role key or database owner credentials, and ensure your RLS policies allow trigger creation.\n                  </div>\n                )}\n              </AlertDescription>\n                <Button variant=\"link\" size=\"sm\" className=\"absolute top-2 right-2\" onClick={() => setError(null)}>\n                <span className=\"sr-only\">Close</span>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"h-4 w-4\">\n                  <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n                  <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n                </svg>\n                </Button>\n            </Alert>\n          )}\n          <div className=\"grid gap-4 grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 w-full\">\n            <Card className=\"w-full\">\n              <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Tables</CardTitle>\n                <TableIcon className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                {loading ? (\n                  <Skeleton className=\"h-8 w-16\" />\n                ) : (\n                  <>\n                    <div className=\"text-2xl font-bold\">{stats.totalTables}</div>\n                    <p className=\"text-xs text-muted-foreground\">{stats.enabledTables} with audit enabled</p>\n                  </>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card className=\"w-full\">\n              <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Audit Events</CardTitle>\n                <Bell className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                {loading ? (\n                  <Skeleton className=\"h-8 w-16\" />\n                ) : (\n                  <>\n                    <div className=\"text-2xl font-bold\">{stats.totalEvents}</div>\n                    <p className=\"text-xs text-muted-foreground\">+{stats.recentEvents} in the last 24h</p>\n                  </>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card className=\"w-full\">\n              <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Status</CardTitle>\n                <div className=\"flex items-center\">\n                  <span className={`h-2.5 w-2.5 rounded-full ${stats.enabledTables > 0 ? 'bg-green-500' : 'bg-amber-500'} mr-1.5`}></span>\n                  <span className=\"text-sm text-muted-foreground\">{stats.enabledTables > 0 ? 'Active' : 'Inactive'}</span>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {loading ? (\n                  <Skeleton className=\"h-8 w-full\" />\n                ) : (\n                  <div className=\"text-sm\">\n                    {stats.enabledTables > 0 ? (\n                      <p>QuickAudit is active with {stats.enabledTables} {stats.enabledTables === 1 ? 'table' : 'tables'} monitored.</p>\n                    ) : (\n                      <p>QuickAudit is installed but no tables are currently being monitored. Enable at least one table to start auditing.</p>\n                    )}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card className=\"w-full\">\n              <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Retention</CardTitle>\n                <Settings className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">30 days</div>\n                <p className=\"text-xs text-muted-foreground\">Default retention policy</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Tabs defaultValue=\"tables\" className=\"w-full max-w-[100vw]\">\n            <div className=\"flex items-center justify-between border-b pb-2 mb-4\">\n              <TabsList>\n                <TabsTrigger value=\"tables\">Tables</TabsTrigger>\n                <TabsTrigger value=\"logs\">Audit Logs</TabsTrigger>\n              </TabsList>\n            </div>\n\n            <TabsContent value=\"tables\" className=\"space-y-4 w-full max-w-[100vw]\">\n              <div className=\"bg-card w-full max-w-[100vw]\">\n                <div className=\"flex flex-col md:flex-row md:items-center justify-between mb-4 px-4\">\n                  <h3 className=\"font-semibold\">Audit Table Setup</h3>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={enableAllTables}\n                  >\n                    Enable All\n                  </Button>\n                </div>\n\n                <div className=\"overflow-x-auto w-full max-w-[100vw]\" style={{ WebkitOverflowScrolling: \"touch\" }}>\n                  <div className=\"inline-block min-w-full align-middle\">\n                    <div className=\"overflow-hidden\">\n                      <table className=\"min-w-full divide-y divide-border\">\n                        <thead>\n                          <tr>\n                            <th\n                              scope=\"col\"\n                              className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase\"\n                            >\n                              Table Name\n                            </th>\n                            <th\n                              scope=\"col\"\n                              className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase\"\n                            >\n                              Audit Enabled\n                            </th>\n                            <th\n                              scope=\"col\"\n                              className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase\"\n                            >\n                              Status\n                            </th>\n                            <th\n                              scope=\"col\"\n                              className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase\"\n                            >\n                              Last Modified\n                            </th>\n                          </tr>\n                        </thead>\n                        <tbody className=\"divide-y divide-border\">\n                          {loading ? (\n                            Array.from({ length: 5 }).map((_, index) => (\n                              <tr key={index}>\n                                <td className=\"px-6 py-4\">\n                                  <Skeleton className=\"h-5 w-32\" />\n                                </td>\n                                <td className=\"px-6 py-4\">\n                                  <Skeleton className=\"h-5 w-12\" />\n                                </td>\n                                <td className=\"px-6 py-4\">\n                                  <Skeleton className=\"h-5 w-16\" />\n                                </td>\n                                <td className=\"px-6 py-4\">\n                                  <Skeleton className=\"h-5 w-24\" />\n                                </td>\n                              </tr>\n                            ))\n                          ) : tables.length === 0 ? (\n                            <tr>\n                              <td colSpan={4} className=\"px-6 py-4 text-center text-muted-foreground\">\n                                No tables configured for audit. Run the setup SQL to create the required tables.\n                              </td>\n                            </tr>\n                          ) : (\n                            tables.map((table) => (\n                              <tr key={table.id}>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">{table.table_name}</td>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                                  <Switch\n                                    checked={table.audit_enabled}\n                                    onCheckedChange={() => toggleAudit(table.id, table.audit_enabled, table.table_name)}\n                                  />\n                                </td>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                                  {table.audit_enabled ? (\n                                    <Badge className=\"bg-green-500 hover:bg-green-600\">\n                                      <Check className=\"mr-1 h-3 w-3\" />\n                                      Active\n                                    </Badge>\n                                  ) : (\n                                    <Badge variant=\"outline\">\n                                      <AlertCircle className=\"mr-1 h-3 w-3\" />\n                                      Inactive\n                                    </Badge>\n                                  )}\n                                </td>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-muted-foreground\">\n                                  {formatTimestamp(table.created_at)}\n                                </td>\n                              </tr>\n                            ))\n                          )}\n                        </tbody>\n                      </table>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"logs\" className=\"space-y-4 w-full max-w-[100vw]\">\n              <div className=\"bg-card w-full max-w-[100vw]\">\n                <div className=\"flex flex-col space-y-4 md:flex-row md:items-center md:space-y-0 md:space-x-4 mb-4 px-4\">\n                  <div className=\"flex-1\">\n                    <Input\n                      placeholder=\"Search logs...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                    />\n                  </div>\n                  <div className=\"flex gap-2 overflow-x-auto pb-2 md:pb-0\">\n                    <select\n                      className=\"rounded-md border border-input bg-background px-3 py-2 text-sm min-w-[120px]\"\n                      value={selectedTable || \"\"}\n                      onChange={(e) => setSelectedTable(e.target.value || null)}\n                    >\n                      <option value=\"\">All Tables</option>\n                      {uniqueTables.map((table) => (\n                        <option key={table} value={table}>\n                          {table}\n                        </option>\n                      ))}\n                    </select>\n                    <select\n                      className=\"rounded-md border border-input bg-background px-3 py-2 text-sm min-w-[140px]\"\n                      value={selectedOperation || \"\"}\n                      onChange={(e) => setSelectedOperation(e.target.value || null)}\n                    >\n                      <option value=\"\">All Operations</option>\n                      {uniqueOperations.map((op) => (\n                        <option key={op} value={op}>\n                          {op}\n                        </option>\n                      ))}\n                    </select>\n                    <TooltipProvider>\n                      <Tooltip>\n                        <TooltipTrigger asChild>\n                          <Button\n                            variant=\"outline\"\n                            onClick={() => {\n                              setSearchTerm(\"\")\n                              setSelectedTable(null)\n                              setSelectedOperation(null)\n                            }}\n                          >\n                            <Filter className=\"h-4 w-4\" />\n                          </Button>\n                        </TooltipTrigger>\n                        <TooltipContent>\n                          <p>Clear filters</p>\n                        </TooltipContent>\n                      </Tooltip>\n                    </TooltipProvider>\n                  </div>\n                </div>\n\n                <div className=\"overflow-x-auto w-full max-w-[100vw]\" style={{ WebkitOverflowScrolling: \"touch\" }}>\n                  <div className=\"inline-block min-w-full align-middle\">\n                    <div className=\"overflow-hidden\">\n                      <table className=\"min-w-full divide-y divide-border\">\n                        <thead>\n                          <tr>\n                            <th\n                              scope=\"col\"\n                              className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase\"\n                            >\n                              Table\n                            </th>\n                            <th\n                              scope=\"col\"\n                              className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase\"\n                            >\n                              User\n                            </th>\n                            <th\n                              scope=\"col\"\n                              className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase\"\n                            >\n                              Operation\n                            </th>\n                            <th\n                              scope=\"col\"\n                              className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase\"\n                            >\n                              Timestamp\n                            </th>\n                            <th\n                              scope=\"col\"\n                              className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase\"\n                            >\n                              Changes\n                            </th>\n                            <th\n                              scope=\"col\"\n                              className=\"px-6 py-3 text-right text-xs font-medium text-muted-foreground uppercase\"\n                            >\n                              Action\n                            </th>\n                          </tr>\n                        </thead>\n                        <tbody className=\"divide-y divide-border\">\n                          {loading ? (\n                            Array.from({ length: 5 }).map((_, index) => (\n                              <tr key={index}>\n                                <td className=\"px-6 py-4\">\n                                  <Skeleton className=\"h-5 w-24\" />\n                                </td>\n                                <td className=\"px-6 py-4\">\n                                  <Skeleton className=\"h-5 w-32\" />\n                                </td>\n                                <td className=\"px-6 py-4\">\n                                  <Skeleton className=\"h-5 w-16\" />\n                                </td>\n                                <td className=\"px-6 py-4\">\n                                  <Skeleton className=\"h-5 w-32\" />\n                                </td>\n                                <td className=\"px-6 py-4\">\n                                  <Skeleton className=\"h-5 w-40\" />\n                                </td>\n                                <td className=\"px-6 py-4 text-right\">\n                                  <Skeleton className=\"h-5 w-16 ml-auto\" />\n                                </td>\n                              </tr>\n                            ))\n                          ) : filteredLogs.length === 0 ? (\n                            <tr>\n                              <td colSpan={6} className=\"px-6 py-4 text-center text-muted-foreground\">\n                                No audit logs found. Make sure you have audit enabled for some tables.\n                              </td>\n                            </tr>\n                          ) : (\n                            filteredLogs.map((log) => {\n                              const diffText =\n                                log.operation === \"UPDATE\"\n                                  ? getDiffText(log.old_data, log.row_data)\n                                  : log.operation === \"INSERT\"\n                                    ? \"New record created\"\n                                    : \"Record deleted\"\n\n                              return (\n                                <tr key={log.id}>\n                                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">{log.table_name}</td>\n                                  <td className=\"px-6 py-4 whitespace-nowrap text-sm\">{log.user_email || \"System\"}</td>\n                                  <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                                    <Badge\n                                      variant={\n                                        log.operation === \"DELETE\"\n                                          ? \"destructive\"\n                                          : log.operation === \"INSERT\"\n                                            ? \"default\"\n                                            : \"outline\"\n                                      }\n                                    >\n                                      {log.operation}\n                                    </Badge>\n                                  </td>\n                                  <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                                    {formatTimestamp(log.timestamp)}\n                                  </td>\n                                  <td className=\"px-6 py-4 text-sm\">\n                                    <TooltipProvider>\n                                      <Tooltip>\n                                        <TooltipTrigger asChild>\n                                          <div className=\"max-w-xs truncate cursor-pointer flex items-center\">\n                                            <span className=\"truncate\">{diffText}</span>\n                                            <Info className=\"h-3.5 w-3.5 ml-1 text-muted-foreground\" />\n                                          </div>\n                                        </TooltipTrigger>\n                                        <TooltipContent className=\"max-w-sm\">\n                                          <ScrollArea className=\"h-[200px]\">\n                                            <div className=\"p-2\">\n                                              <p className=\"font-semibold mb-2\">Change Details:</p>\n                                              {log.operation === \"UPDATE\" ? (\n                                                <div>\n                                                  <p className=\"text-xs mb-1\">Old Data:</p>\n                                                  <pre className=\"text-xs bg-muted p-2 rounded mb-2 overflow-auto text-gray-700\">\n                                                    {JSON.stringify(log.old_data, null, 2)}\n                                                  </pre>\n                                                  <p className=\"text-xs mb-1\">New Data:</p>\n                                                  <pre className=\"text-xs bg-muted p-2 rounded overflow-auto text-gray-700\">\n                                                    {JSON.stringify(log.row_data, null, 2)}\n                                                  </pre>\n                                                </div>\n                                              ) : log.operation === \"INSERT\" ? (\n                                                <div>\n                                                  <p className=\"text-xs mb-1\">Inserted Data:</p>\n                                                  <pre className=\"text-xs bg-muted p-2 rounded overflow-auto text-gray-700\">\n                                                    {JSON.stringify(log.row_data, null, 2)}\n                                                  </pre>\n                                                </div>\n                                              ) : (\n                                                <div>\n                                                  <p className=\"text-xs mb-1\">Deleted Data:</p>\n                                                  <pre className=\"text-xs bg-muted p-2 rounded overflow-auto text-gray-700\">\n                                                    {JSON.stringify(log.old_data, null, 2)}\n                                                  </pre>\n                                                </div>\n                                              )}\n                                            </div>\n                                          </ScrollArea>\n                                        </TooltipContent>\n                                      </Tooltip>\n                                    </TooltipProvider>\n                                  </td>\n                                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-right\">\n                                    <TooltipProvider>\n                                      <Tooltip>\n                                        <TooltipTrigger asChild>\n                                          <Button\n                                            variant=\"outline\"\n                                            size=\"sm\"\n                                            onClick={() =>\n                                              handleRevert(log.id, log.operation, log.old_data, log.table_name)\n                                            }\n                                            disabled={log.reverted}\n                                          >\n                                            Revert\n                                          </Button>\n                                        </TooltipTrigger>\n                                        <TooltipContent>\n                                          <p>Attempt to revert this change</p>\n                                        </TooltipContent>\n                                      </Tooltip>\n                                    </TooltipProvider>\n                                  </td>\n                                </tr>\n                              )\n                            })\n                          )}\n                        </tbody>\n                      </table>\n                      \n                      {filteredLogs.length > 0 && (\n                        <div className=\"px-6 py-3 text-sm text-muted-foreground text-center\">\n                          Showing {filteredLogs.length} of {changes.length} audit logs\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\n",
      "type": "registry:component"
    }
  ]
}